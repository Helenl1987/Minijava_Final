//
// Generated by JTB 1.3.2
//

package kanga.S2K;
import kanga.syntaxtree.*;
import kanga.visitor.GJDepthFirst;

import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class S2KVisitor2 extends GJDepthFirst<String,BBStatement> {
	
	
	public String[] regname = {"s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "t0", "t1", "t2", "t3", "t4", "t5", "t6", "t7", "t8", "t9", "a0", "a1", "a2", "a3", "v0", "v1"};
	public String kangacode = "";
	public ControlFlowGraph currentcfg = null;
	
	public Vector<Integer> spilledTemp = new Vector<Integer>();
	public PriorityQueue<BBTemp> nowTemp = new PriorityQueue<BBTemp>();
	public PriorityQueue<BBTemp> nowTempS = new PriorityQueue<BBTemp>();
	public Vector<Integer> freeSReg = new Vector<Integer>();
	public Vector<Integer> freeTReg = new Vector<Integer>();
	public Vector<Integer> usedSReg = new Vector<Integer>();
//	public Vector<Integer> usedTReg = new Vector<Integer>();
	
	public int callargs = 0;
	
	S2KVisitor2(ControlFlowGraph cfg) {
		currentcfg = cfg;
		if(cfg.paramnum > 4) {
			cfg.stackunit = cfg.paramnum - 4;			
		}
		for(int i = 0; i < 8; i++) {
			freeSReg.addElement(i);
		}
		for(int i = 8; i < 18; i++) {
			freeTReg.addElement(i);
		}
		FixKangaCode();
	}
	
	public void AddString(String s) {
		kangacode += "\t" + s + "\n";
	}
	
	public void RegAllocation() {
		currentcfg.InitTemp();
		BBTemp[] temparray = currentcfg.temptable.values().toArray(new BBTemp[0]);
		Arrays.sort(temparray, new Comparator<Object>(){
			public int compare(Object a, Object b) {
				BBTemp t1 = (BBTemp)a;
				BBTemp t2 = (BBTemp)b;
				return t1.start - t2.start;
			}
		});
		for(int x: currentcfg.argtemptable.keySet()) {
			if(x < 4)
				continue;
			BBTemp bbtmp = currentcfg.argtemptable.get(x);
			bbtmp.regnum = x - 4 + 24;
			spilledTemp.add(x-4);
		}
		//allocate reg for each Temp
		for(int i = 0; i < temparray.length; i++) {
			BBTemp bbtmp = temparray[i];
//			System.out.println(i + " TEMP " + bbtmp.tempnum + " " + "start = " + bbtmp.start + " " + "end = " + bbtmp.end);
			for(int j = 0; j < i; j++) {
				BBTemp oldtmp = temparray[j];
				if(oldtmp.ifdead)
					continue;
				if(oldtmp.end >= bbtmp.start)
					continue;
				oldtmp.ifdead = true;
				int regnum = oldtmp.regnum;
				if(regnum < 18) {
					if(regnum < 8) {
						nowTempS.remove(oldtmp);
						nowTemp.remove(oldtmp);
						freeSReg.add(0, regnum);
					}
					else {
						nowTemp.remove(oldtmp);
						freeTReg.add(0, regnum);
					}
				}
				else {
					spilledTemp.removeElement(regnum - 24);
				}
			}
			if(bbtmp.canbet == true && ((!freeSReg.isEmpty()) || (!freeTReg.isEmpty()))) {
				int regnum;
				if(!freeTReg.isEmpty()) {
					regnum = freeTReg.firstElement();
					freeTReg.removeElement(regnum);
				}
				else {
					regnum = freeSReg.firstElement();
					freeSReg.removeElement(regnum);					
				}
				bbtmp.regnum = regnum;
				if(regnum < 8) {
					nowTempS.add(bbtmp);
					nowTemp.add(bbtmp);
					if(!usedSReg.contains(regnum))
						usedSReg.addElement(regnum);
				}
				else {
					nowTemp.add(bbtmp);
//					if(!usedTReg.contains(regnum))
//						usedTReg.addElement(regnum);
				}
//				System.out.println("TEMP" + bbtmp.tempnum + " Reg" + regnum + " " + regname[regnum] + " canbet = " + bbtmp.canbet);
			}
			else if(bbtmp.canbet == false && !freeSReg.isEmpty()) {
				int regnum;
				regnum = freeSReg.firstElement();
				freeSReg.removeElement(regnum);					
				bbtmp.regnum = regnum;
				nowTempS.add(bbtmp);
				nowTemp.add(bbtmp);
				if(!usedSReg.contains(regnum))
					usedSReg.addElement(regnum);
//				System.out.println("TEMP" + bbtmp.tempnum + " Reg" + regnum + " " + regname[regnum] + " canbet = " + bbtmp.canbet);
			}
			else {
				int k;
				for(k = 0; k < currentcfg.stackunit; k++) {
					if(!spilledTemp.contains(k)) {
						break;
					}
				}
				if(k == currentcfg.stackunit)
					currentcfg.stackunit++;
				int regnum = k + 24;
				bbtmp.regnum = regnum;
				
				if(bbtmp.canbet == true) {
					BBTemp replacetmp = nowTemp.poll();
					if(replacetmp.regnum < 8)
						nowTempS.remove(replacetmp);
					if(replacetmp.end < bbtmp.end) {
						bbtmp.regnum = regnum;
						nowTemp.add(replacetmp);
						if(replacetmp.regnum < 8)
							nowTempS.add(replacetmp);
					}
					else {
						bbtmp.regnum = replacetmp.regnum;
						replacetmp.regnum = regnum;
						nowTemp.add(bbtmp);
						if(bbtmp.regnum < 8)
							nowTempS.add(bbtmp);
					}
				}
				else {
					BBTemp replacetmp = nowTempS.poll();
					nowTemp.remove(replacetmp);
					if(replacetmp.end < bbtmp.end) {
						bbtmp.regnum = regnum;
						nowTempS.add(replacetmp);
						nowTemp.add(replacetmp);
					}
					else {
						bbtmp.regnum = replacetmp.regnum;
						replacetmp.regnum = regnum;
						nowTempS.add(bbtmp);
						nowTemp.add(bbtmp);
					}
				}
				
				spilledTemp.addElement(k);
//				System.out.println("TEMP " + bbtmp.tempnum + " SPILLEDARG " + k);
			}
		}
		for(int i = 0; i < currentcfg.paramnum; i++) {
			BBTemp bbtmp = currentcfg.argtemptable.get(i);
			if(bbtmp == null)
				continue;
			if(i < 4) {
				if(bbtmp.regnum < 18) {
					AddString("MOVE " + regname[bbtmp.regnum] + " a" + i);
				}
				else {
					AddString("ASTORE SPILLEDARG " + (bbtmp.regnum - 24) + " a" + i);
				}
			}
			else {
				if(bbtmp.regnum < 18) {
					AddString("ALOAD " + regname[bbtmp.regnum] + " SPILLEDARG " + (i-4));
				}
				else {
					AddString("ALOAD v1 SPILLEDARG " + (i-4));
					AddString("ASTORE SPILLEDARG " + (bbtmp.regnum - 24) + " v1");
				}
			}
		}
	}
	
	public void FixKangaCode() {
		RegAllocation();
		for(BBStatement bbs: currentcfg.bbstate) {
			if(bbs.label != null) {
				kangacode += currentcfg.oldL2newL.get(bbs.label);
			}
			bbs.node.accept(this, bbs);
		}
		String astore = "", aload = "";
		for(Integer spi: usedSReg) {
			astore += "\t" + "ASTORE SPILLEDARG " + currentcfg.stackunit + " " + regname[spi] + "\n";
			aload += "\t" + "ALOAD " + regname[spi] + " SPILLEDARG " + currentcfg.stackunit + "\n";
			currentcfg.stackunit++;
		}
//		for(Integer spi: usedTReg) {
//			astore += "\t" + "ASTORE SPILLEDARG " + currentcfg.stackunit + " " + regname[spi] + "\n";
//			aload += "\t" + "ALOAD " + regname[spi] + " SPILLEDARG " + currentcfg.stackunit + "\n";
//			currentcfg.stackunit++;
//		}

		kangacode = astore + kangacode + aload;
		kangacode = currentcfg.methodname + " [" + currentcfg.paramnum + "][" + currentcfg.stackunit + "][" + currentcfg.maxproparam + "]\n" + kangacode + "END\n";

	}
	
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	public String visit(NodeList n, BBStatement argu) {
		String _ret = null;
		int _count = 0;
		for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
			e.nextElement().accept(this, argu);
			_count++;
		}
		return _ret;
	}

	public String visit(NodeListOptional n, BBStatement argu) {
		if (n.present()) {
			String _ret = null;
			int _count = 0;
			for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
				Node node = e.nextElement();
				String tmp = node.accept(this, argu);
				if(node instanceof Temp) {
					if(callargs < 4) {
						AddString("MOVE a" + callargs + " " + tmp);
					}
					else {
						AddString("PASSARG " + (callargs - 3) + " " + tmp);
					}
					callargs++;
				}
				_count++;
			}
			return _ret;
		} else
			return null;
	}

	public String visit(NodeOptional n, BBStatement argu) {
		if (n.present())
			return n.node.accept(this, argu);
		else
			return null;
	}

	public String visit(NodeSequence n, BBStatement argu) {
		String _ret = null;
		int _count = 0;
		for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
			e.nextElement().accept(this, argu);
			_count++;
		}
		return _ret;
	}

	public String visit(NodeToken n, BBStatement argu) {
		return null;
	}

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public String visit(Goal n, BBStatement argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public String visit(StmtList n, BBStatement argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public String visit(Procedure n, BBStatement argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public String visit(Stmt n, BBStatement argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public String visit(NoOpStmt n, BBStatement argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      AddString("NOOP");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public String visit(ErrorStmt n, BBStatement argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      AddString("ERROR");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public String visit(CJumpStmt n, BBStatement argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      String tmp1 = n.f1.accept(this, argu);
      String tmp2 = currentcfg.oldL2newL.get(n.f2.accept(this, argu));
      AddString("CJUMP " + tmp1 + " " + tmp2);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public String visit(JumpStmt n, BBStatement argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      String tmp1 = currentcfg.oldL2newL.get(n.f1.accept(this, argu));
      AddString("JUMP " + tmp1);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public String visit(HStoreStmt n, BBStatement argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      String tmp1 = n.f1.accept(this, argu);
      String tmp2 = n.f2.accept(this, argu);
      String tmp3 = n.f3.accept(this, argu);
      AddString("HSTORE " + tmp1 + " " + tmp2 + " " + tmp3);
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public String visit(HLoadStmt n, BBStatement argu) {
      String _ret=null;
      BBTemp bbtmp = currentcfg.temptable.get(Integer.parseInt(n.f1.f1.f0.tokenImage));
      if(bbtmp == null)
    	  return _ret;
      //delete dead code
      if(argu.ind < bbtmp.start || argu.ind > bbtmp.end)
    	  return _ret;
      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
      String tmp2 = n.f2.accept(this, argu);
      String tmp3 = n.f3.accept(this, argu);
      if(bbtmp.regnum < 18) {
    	  String tmp1 = regname[bbtmp.regnum];
    	  AddString("HLOAD " + tmp1 + " " + tmp2 + " " + tmp3);
      }
      else {
    	  AddString("HLOAD v1 " + tmp2 + " " + tmp3);
    	  AddString("ASTORE SPILLEDARG " + (bbtmp.regnum - 24) + " v1");
      }
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public String visit(MoveStmt n, BBStatement argu) {
      String _ret=null;
      BBTemp bbtmp = currentcfg.temptable.get(Integer.parseInt(n.f1.f1.f0.tokenImage));
      if(bbtmp == null)
    	  return _ret;
      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
      String tmp2 = n.f2.accept(this, argu);
      //delete dead code
      if(argu.ind < bbtmp.start || argu.ind > bbtmp.end)
    	  return _ret;
      if(bbtmp.regnum < 18) {
    	  String tmp1 = regname[bbtmp.regnum];
    	  AddString("MOVE " + tmp1 + " " + tmp2);
      }
      else {
    	  AddString("MOVE v1 " + tmp2);
    	  AddString("ASTORE SPILLEDARG " + (bbtmp.regnum - 24) + " v1");
      }
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public String visit(PrintStmt n, BBStatement argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      String tmp1 = n.f1.accept(this, argu);
      AddString("PRINT " + tmp1);
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public String visit(Exp n, BBStatement argu) {
      String _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public String visit(StmtExp n, BBStatement argu) {
      String _ret=null;
      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String tmp3 = n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      AddString("MOVE v0 " + tmp3);
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public String visit(Call n, BBStatement argu) {
      String _ret=null;
      callargs = 0;
      n.f0.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String tmp1 = n.f1.accept(this, argu);
      AddString("CALL " + tmp1);
      _ret = "v0";
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public String visit(HAllocate n, BBStatement argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      String tmp1 = n.f1.accept(this, argu);
      _ret = "HALLOCATE " + tmp1;
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public String visit(BinOp n, BBStatement argu) {
      String _ret=null;
      String tmp0 = n.f0.accept(this, argu);
      String tmp1 = n.f1.accept(this, argu);
      String tmp2 = n.f2.accept(this, argu);
      _ret = tmp0 + " " + tmp1 + " " + tmp2;
      return _ret;
   }

   /**
    * f0 -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    */
   public String visit(Operator n, BBStatement argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f0.choice.toString();
      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public String visit(SimpleExp n, BBStatement argu) {
      String _ret=null;
      String tmp0 = n.f0.accept(this, argu);
      _ret = tmp0;
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public String visit(Temp n, BBStatement argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      BBTemp bbtmp = currentcfg.temptable.get(Integer.parseInt(n.f1.f0.tokenImage));
      if(bbtmp.regnum < 18) {
    	  _ret = regname[bbtmp.regnum];
      }
      else {
    	  AddString("ALOAD v1 SPILLEDARG " + (bbtmp.regnum - 24));
    	  _ret = "v1";
      }
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public String visit(IntegerLiteral n, BBStatement argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f0.tokenImage;
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public String visit(Label n, BBStatement argu) {
      String _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f0.tokenImage;
      return _ret;
   }

}
