//
// Generated by JTB 1.3.2
//

package minijava.minijava2piglet;

import syntaxtree.*;

import java.util.*;

import minijava.symboltable.*;
import minijava.typecheck.PrintError;
import visitor.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class M2PVisitor extends GJDepthFirst<VariType, Table> {

	String pigletCode = "";
	int tabnum = 0;
	int labelnum = 1;

	void AddString(String str) {
		for (int i = 0; i < tabnum; i++) {
			pigletCode = pigletCode + "\t";
		}
		pigletCode = pigletCode + str + '\n';
	}

	//
	// Auto class visitors--probably don't need to be overridden.
	//
	public VariType visit(NodeList n, Table argu) {
		VariType _ret = null;
		int _count = 0;
		for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
			e.nextElement().accept(this, argu);
			_count++;
		}
		return _ret;
	}

	public VariType visit(NodeListOptional n, Table argu) {
		if (n.present()) {
			VariType _ret = null;
			int _count = 0;
			for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
				e.nextElement().accept(this, argu);
				_count++;
			}
			return _ret;
		} else
			return null;
	}

	public VariType visit(NodeOptional n, Table argu) {
		if (n.present())
			return n.node.accept(this, argu);
		else
			return null;
	}

	public VariType visit(NodeSequence n, Table argu) {
		VariType _ret = null;
		int _count = 0;
		for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
			e.nextElement().accept(this, argu);
			_count++;
		}
		return _ret;
	}

	public VariType visit(NodeToken n, Table argu) {
		return null;
	}

	//
	// User-generated visitor methods below
	//

	/**
	 * f0 -> MainClass() 
	 * f1 -> ( TypeDeclaration() )* 
	 * f2 -> <EOF>
	 */
	public VariType visit(Goal n, Table argu) {
		VariType _ret = null;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "class" 
	 * f1 -> Identifier() 
	 * f2 -> "{" 
	 * f3 -> "public" 
	 * f4 -> "static"
	 * f5 -> "void" 
	 * f6 -> "main" 
	 * f7 -> "(" 
	 * f8 -> "String" 
	 * f9 -> "[" 
	 * f10 -> "]"
	 * f11 -> Identifier() 
	 * f12 -> ")" 
	 * f13 -> "{" 
	 * f14 -> ( VarDeclaration() )*
	 * f15 -> ( Statement() )* 
	 * f16 -> "}" 
	 * f17 -> "}"
	 */
	public VariType visit(MainClass n, Table argu) {
		VariType _ret = null;
		TopTable toptable = (TopTable) argu;
		MethodTable methodtable = toptable.getclasstable(toptable.mainclass_name).getmethodtable("main");
		methodtable.tempb += methodtable.local_variable_V.size();
		AddString("MAIN");
		tabnum++;
		for(int i = 20; i < methodtable.tempb; i++) {
			AddString("MOVE TEMP " + i + " 0");
		}
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		n.f3.accept(this, argu);
		n.f4.accept(this, argu);
		n.f5.accept(this, argu);
		n.f6.accept(this, argu);
		n.f7.accept(this, argu);
		n.f8.accept(this, argu);
		n.f9.accept(this, argu);
		n.f10.accept(this, argu);
		n.f11.accept(this, argu);
		n.f12.accept(this, argu);
		n.f13.accept(this, argu);
		n.f14.accept(this, toptable.getclasstable(toptable.mainclass_name).getmethodtable("main"));
		n.f15.accept(this, toptable.getclasstable(toptable.mainclass_name).getmethodtable("main"));
		n.f16.accept(this, argu);
		n.f17.accept(this, argu);
		tabnum--;
		AddString("END");
		return _ret;
	}

	/**
	 * f0 -> ClassDeclaration() 
	 * 		 | ClassExtendsDeclaration()
	 */
	public VariType visit(TypeDeclaration n, Table argu) {
		VariType _ret = null;
		n.f0.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "class" 
	 * f1 -> Identifier() 
	 * f2 -> "{" 
	 * f3 -> ( VarDeclaration() )* 
	 * f4 -> ( MethodDeclaration() )* 
	 * f5 -> "}"
	 */
	public VariType visit(ClassDeclaration n, Table argu) {
		VariType _ret = null;
		TopTable toptable = (TopTable) argu;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		ClassTable classtable = toptable.getclasstable(n.f1.f0.tokenImage);
		n.f2.accept(this, argu);
		n.f3.accept(this, classtable);
		n.f4.accept(this, classtable);
		n.f5.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "class" 
	 * f1 -> Identifier() 
	 * f2 -> "extends" 
	 * f3 -> Identifier() 
	 * f4 -> "{" 
	 * f5 -> ( VarDeclaration() )* 
	 * f6 -> ( MethodDeclaration() )* 
	 * f7 -> "}"
	 */
	public VariType visit(ClassExtendsDeclaration n, Table argu) {
		VariType _ret = null;
		TopTable toptable = (TopTable) argu;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		ClassTable classtable = toptable.getclasstable(n.f1.f0.tokenImage);
		n.f2.accept(this, argu);
		n.f3.accept(this, argu);
		n.f4.accept(this, argu);
		n.f5.accept(this, classtable);
		n.f6.accept(this, classtable);
		n.f7.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> Type() 
	 * f1 -> Identifier() 
	 * f2 -> ";"
	 */
	public VariType visit(VarDeclaration n, Table argu) {
		VariType _ret = null;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "public" 
	 * f1 -> Type() 
	 * f2 -> Identifier() 
	 * f3 -> "(" 
	 * f4 -> ( FormalParameterList() )? 
	 * f5 -> ")" 
	 * f6 -> "{" 
	 * f7 -> ( VarDeclaration() )*
	 * f8 -> ( Statement() )* 
	 * f9 -> "return" 
	 * f10 -> Expression() 
	 * f11 -> ";" 
	 * f12 -> "}"
	 */
	public VariType visit(MethodDeclaration n, Table argu) {
		VariType _ret = null;
		AddString("");
		ClassTable classtable = (ClassTable) argu;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		MethodTable methodtable = classtable.getmethodtable(n.f2.f0.tokenImage);
		AddString(classtable.class_name + "_" + methodtable.method_name + " [ " + (methodtable.paramnum+1) + " ]");
		tabnum++;
		AddString("BEGIN");
		tabnum++;
		methodtable.tempb += methodtable.local_variable_V.size();
		for(int i = 20; i < methodtable.tempb; i++) {
			AddString("MOVE TEMP " + i + " 0");
		}
//		if(methodtable.paramnum >= 19) {
//			AddString("MOVE TEMP 19 " + " HALLOCATE " + (4*(methodtable.paramnum-18)));
//		}
		n.f3.accept(this, argu);
		n.f4.accept(this, argu);
		n.f5.accept(this, argu);
		n.f6.accept(this, argu);
		n.f7.accept(this, methodtable);
		n.f8.accept(this, methodtable);
		n.f9.accept(this, argu);
		VariType t10 = n.f10.accept(this, methodtable);
		AddString("RETURN TEMP " + t10.tempnum);
		tabnum--;
		AddString("END");
		tabnum--;
		n.f11.accept(this, argu);
		n.f12.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> FormalParameter() 
	 * f1 -> ( FormalParameterRest() )*
	 */
	public VariType visit(FormalParameterList n, Table argu) {
		VariType _ret = null;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> Type() 
	 * f1 -> Identifier()
	 */
	public VariType visit(FormalParameter n, Table argu) {
		VariType _ret = null;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "," 
	 * f1 -> FormalParameter()
	 */
	public VariType visit(FormalParameterRest n, Table argu) {
		VariType _ret = null;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> ArrayType() 
	 * 		 | BooleanType() 
	 * 		 | IntegerType() 
	 * 		 | Identifier()
	 */
	public VariType visit(Type n, Table argu) {
		VariType _ret = null;
		n.f0.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "int" 
	 * f1 -> "[" 
	 * f2 -> "]"
	 */
	public VariType visit(ArrayType n, Table argu) {
		VariType _ret = null;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "boolean"
	 */
	public VariType visit(BooleanType n, Table argu) {
		VariType _ret = null;
		n.f0.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "int"
	 */
	public VariType visit(IntegerType n, Table argu) {
		VariType _ret = null;
		n.f0.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> Block() 
	 * 		 | AssignmentStatement() 
	 * 		 | ArrayAssignmentStatement() 
	 * 		 | IfStatement() 
	 * 		 | WhileStatement() 
	 * 		 | PrintStatement()
	 */
	public VariType visit(Statement n, Table argu) {
		VariType _ret = null;
		n.f0.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "{" 
	 * f1 -> ( Statement() )* 
	 * f2 -> "}"
	 */
	public VariType visit(Block n, Table argu) {
		VariType _ret = null;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> Identifier() 
	 * f1 -> "=" 
	 * f2 -> Expression() 
	 * f3 -> ";"
	 */
	public VariType visit(AssignmentStatement n, Table argu) {
		VariType _ret = null;
		n.f0.accept(this, argu);
		MethodTable methodtable = (MethodTable) argu;
		n.f1.accept(this, argu);
		VariType t2 = n.f2.accept(this, argu);
		n.f3.accept(this, argu);
		int varinum = methodtable.GetVariNumLocal(n.f0.f0.tokenImage);
		if(varinum >= 0) { //f0在函数中，且为本地变量
			AddString("MOVE TEMP " + varinum + " TEMP " + t2.tempnum);
			return _ret;
		}
		varinum = methodtable.GetVariNumParam(n.f0.f0.tokenImage);
		if(varinum >= 0) { //f0在函数中，且为参数
			if(methodtable.paramnum >= 20 && varinum >= 19) {
				AddString("HSTORE TEMP 19 " + (4*(varinum-19)) + " TEMP " + t2.tempnum);
			}
			else {
				AddString("MOVE TEMP " + varinum + " TEMP " + t2.tempnum);
				return _ret;				
			}
		}
		varinum = methodtable.classtable.GetVariNum(n.f0.f0.tokenImage);
		if(varinum >= 0) { //f0在类中
			AddString("HSTORE TEMP 0 " + (4+4*varinum) + " TEMP " + t2.tempnum);
			return _ret;
		}
		return _ret;
	}

	/**
	 * f0 -> Identifier() 
	 * f1 -> "[" 
	 * f2 -> Expression() 
	 * f3 -> "]" 
	 * f4 -> "=" 
	 * f5 -> Expression() 
	 * f6 -> ";"
	 */
	public VariType visit(ArrayAssignmentStatement n, Table argu) { //TODO
		VariType _ret = null;
		n.f0.accept(this, argu);
		MethodTable methodtable = (MethodTable) argu;
		n.f1.accept(this, argu);
		VariType t2 = n.f2.accept(this, argu);
		n.f3.accept(this, argu);
		n.f4.accept(this, argu);
		VariType t5 = n.f5.accept(this, argu);
		n.f6.accept(this, argu);
		int label1 = labelnum;
		labelnum++;
		int label2 = labelnum;
		labelnum++;
		int tempb1 = methodtable.tempb;
		methodtable.tempb++;
		int tempb2 = methodtable.tempb;
		methodtable.tempb++;
		int varinum = methodtable.GetVariNumLocal(n.f0.f0.tokenImage);
		if(varinum >= 0) { //f0在函数中，且为本地变量
			//tempb2中存数组首地址
			AddString("MOVE TEMP " + tempb2 + " TEMP " + varinum);
			//tempb1中存数组长度
			AddString("HLOAD TEMP " + tempb1 + " TEMP " + varinum + " 0");
		}
		else {
			varinum = methodtable.GetVariNumParam(n.f0.f0.tokenImage);
			if(varinum >= 0) { //f0在函数中，且为参数
				if(methodtable.paramnum >= 20 && varinum >= 19) {
					//tempb2中存数组首地址
					AddString("HLOAD TEMP " + tempb2 + " TEMP 19 " + (4*(varinum-19)));
					//tempb1中存数组长度
					AddString("HLOAD TEMP " + tempb1 + " TEMP " + tempb2 + " 0");
				}
				else {
					//tempb2中存数组首地址
					AddString("MOVE TEMP " + tempb2 + " TEMP " + varinum);
					//tempb1中存数组长度
					AddString("HLOAD TEMP " + tempb1 + " TEMP " + varinum + " 0");					
				}
			}
			else { 
				varinum = methodtable.classtable.GetVariNum(n.f0.f0.tokenImage);
				if(varinum >= 0) { //f0在类中
					//tempb2中存数组首地址
					AddString("HLOAD TEMP " + tempb2 + " TEMP 0 " + (4+4*varinum));
					//tempb1中存数组长度
					AddString("HLOAD TEMP " + tempb1 + " TEMP " + tempb2 + " 0");				
				}
				else { //未定义变量则报错
					AddString("ERROR");
				}
			}
		}
		int tempb3 = methodtable.tempb;
		methodtable.tempb++;
		//检查是否越界
		AddString("MOVE TEMP " + tempb3 + " LT TEMP " + t2.tempnum + " TEMP " + tempb1);
		AddString("CJUMP TEMP " + tempb3 + " L" + label1);
		int tempb4 = methodtable.tempb;
		methodtable.tempb++;
		//未越界，开始赋值
		AddString("MOVE TEMP " + tempb4 + " TIMES TEMP " + t2.tempnum + " 4");
		int tempb5 = methodtable.tempb;
		methodtable.tempb++;
		AddString("MOVE TEMP " + tempb5 + " PLUS TEMP " + tempb2 + " TEMP " + tempb4);
		AddString("HSTORE TEMP " + tempb5 + " 4 TEMP " + t5.tempnum);
		AddString("JUMP L" + label2);
		//越界，报错退出
		AddString("L" + label1);
		AddString("ERROR");
		AddString("L" + label2 + " NOOP");
		return _ret;
	}

	/**
	 * f0 -> "if" 
	 * f1 -> "(" 
	 * f2 -> Expression() 
	 * f3 -> ")" 
	 * f4 -> Statement() 
	 * f5 -> "else" 
	 * f6 -> Statement()
	 */
	public VariType visit(IfStatement n, Table argu) {
		VariType _ret = null;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		VariType t2 = n.f2.accept(this, argu);
		int label1 = labelnum;
		labelnum++;
		AddString("CJUMP TEMP " + t2.tempnum + " L" + label1);
		n.f3.accept(this, argu);
		n.f4.accept(this, argu);
		int label2 = labelnum;
		labelnum++;
		AddString("JUMP L" + label2);
		AddString("L" + label1);
		n.f5.accept(this, argu);
		n.f6.accept(this, argu);
		AddString("L" + label2 + " NOOP");
		return _ret;
	}

	/**
	 * f0 -> "while" 
	 * f1 -> "(" 
	 * f2 -> Expression() 
	 * f3 -> ")" 
	 * f4 -> Statement()
	 */
	public VariType visit(WhileStatement n, Table argu) {
		VariType _ret = null;
		MethodTable methodtable = (MethodTable)argu;
		int label1 = labelnum;
		labelnum++;
		int label2 = labelnum;
		labelnum++;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		AddString("L" + label1 + " NOOP");
		VariType t2 = n.f2.accept(this, argu);
		AddString("CJUMP TEMP " + t2.tempnum + " L" + label2);
		n.f3.accept(this, argu);
		n.f4.accept(this, argu);
		AddString("JUMP L" + label1);
		AddString("L" + label2 + " NOOP");
		return _ret;
	}

	/**
	 * f0 -> "System.out.println" 
	 * f1 -> "(" 
	 * f2 -> Expression() 
	 * f3 -> ")" 
	 * f4 -> ";"
	 */
	public VariType visit(PrintStatement n, Table argu) {
		VariType _ret = null;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		// n.f2.accept(this, argu);
		VariType t2 = n.f2.accept(this, argu);
		AddString("PRINT TEMP " + t2.tempnum);
		n.f3.accept(this, argu);
		n.f4.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> AndExpression() 
	 * 		 | CompareExpression() 
	 * 		 | PlusExpression() 
	 * 		 | MinusExpression() 
	 * 		 | TimesExpression() 
	 * 		 | ArrayLookup() 
	 * 		 | ArrayLength() 
	 * 		 | MessageSend() 
	 * 		 | PrimaryExpression()
	 */
	public VariType visit(Expression n, Table argu) {
		VariType _ret = null;
		_ret = n.f0.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> PrimaryExpression() 
	 * f1 -> "&&" 
	 * f2 -> PrimaryExpression()
	 */
	//若f0为0，则结果为0不用做f2，否则结果等于f2
	public VariType visit(AndExpression n, Table argu) {
		VariType _ret = new VariType();
		_ret.type = "Boolean";
		int label1 = labelnum;
		labelnum++;
		int label2 = labelnum;
		labelnum++;
		MethodTable methodtable = (MethodTable)argu;
		int tempb1 = methodtable.tempb;
		methodtable.tempb++;
		VariType t0 = n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		AddString("CJUMP TEMP " + t0.tempnum + " L" + label1);
		VariType t2 = n.f2.accept(this, argu);
		AddString("MOVE TEMP " + tempb1 + " TEMP " + t2.tempnum);
		AddString("JUMP L" + label2);
		AddString("L" + label1);
		AddString("MOVE TEMP " + tempb1 + " 0");
		AddString("L" + label2 + " NOOP");
		_ret.tempnum = tempb1;
		return _ret;
	}

	/**
	 * f0 -> PrimaryExpression()
	 * f1 -> "<"
	 * f2 -> PrimaryExpression()
	 */
	public VariType visit(CompareExpression n, Table argu) {
		VariType _ret = new VariType();
		MethodTable methodtable = (MethodTable)argu;
		VariType t0 = n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		VariType t2 = n.f2.accept(this, argu);
		int tempb1 = methodtable.tempb;
		methodtable.tempb++;
		AddString("MOVE TEMP " + tempb1 + " LT TEMP " + t0.tempnum + " TEMP " + t2.tempnum);
		_ret.type = "Boolean";
		_ret.tempnum = tempb1;
		return _ret;
	}

	/**
	 * f0 -> PrimaryExpression() 
	 * f1 -> "+" 
	 * f2 -> PrimaryExpression()
	 */
	public VariType visit(PlusExpression n, Table argu) {
		VariType _ret = new VariType();
		VariType t0 = n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		VariType t2 = n.f2.accept(this, argu);
		MethodTable methodtable = (MethodTable)argu;
		int tempb1 = methodtable.tempb;
		methodtable.tempb++;
		AddString("MOVE TEMP " + tempb1 + " PLUS TEMP " + t0.tempnum + " TEMP " + t2.tempnum);
		_ret.type = "Integer";
		_ret.tempnum = tempb1;
		return _ret;
	}

	/**
	 * f0 -> PrimaryExpression() 
	 * f1 -> "-" 
	 * f2 -> PrimaryExpression()
	 */
	public VariType visit(MinusExpression n, Table argu) {
		VariType _ret = new VariType();
		VariType t0 = n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		VariType t2 = n.f2.accept(this, argu);
		MethodTable methodtable = (MethodTable)argu;
		int tempb1 = methodtable.tempb;
		methodtable.tempb++;
		AddString("MOVE TEMP " + tempb1 + " MINUS TEMP " + t0.tempnum + " TEMP " + t2.tempnum);
		_ret.type = "Integer";
		_ret.tempnum = tempb1;
		return _ret;
	}

	/**
	 * f0 -> PrimaryExpression() 
	 * f1 -> "*" 
	 * f2 -> PrimaryExpression()
	 */
	public VariType visit(TimesExpression n, Table argu) {
		VariType _ret = new VariType();
		VariType t0 = n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		VariType t2 = n.f2.accept(this, argu);
		MethodTable methodtable = (MethodTable)argu;
		int tempb1 = methodtable.tempb;
		methodtable.tempb++;
		AddString("MOVE TEMP " + tempb1 + " TIMES TEMP " + t0.tempnum + " TEMP " + t2.tempnum);
		_ret.type = "Integer";
		_ret.tempnum = tempb1;
		return _ret;
	}

	/**
	 * f0 -> PrimaryExpression() 
	 * f1 -> "[" 
	 * f2 -> PrimaryExpression() 
	 * f3 -> "]"
	 */
	public VariType visit(ArrayLookup n, Table argu) {
		VariType _ret = new VariType();
		_ret.type = "Integer";
		VariType t0 = n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		VariType t2 = n.f2.accept(this, argu);
		n.f3.accept(this, argu);
		MethodTable methodtable = (MethodTable)argu;
		int label1 = labelnum;
		labelnum++;
		int label2 = labelnum;
		labelnum++;
		int tempb1 = methodtable.tempb;
		methodtable.tempb++;
		//tempb1中存数组的长度
		AddString("HLOAD TEMP " + tempb1 + " TEMP " + t0.tempnum + " 0");
		int tempb2 = methodtable.tempb;
		methodtable.tempb++;
		//检查是否越界
		AddString("MOVE TEMP " + tempb2 + " LT TEMP " + t2.tempnum + " TEMP " + tempb1);
		AddString("CJUMP TEMP " + tempb2 + " L" + label1);
		int tempb3 = methodtable.tempb;
		methodtable.tempb++;
		//未越界，开始取值
		AddString("MOVE TEMP " + tempb3 + " TIMES TEMP " + t2.tempnum + " 4");
		int tempb4 = methodtable.tempb;
		methodtable.tempb++;
		AddString("MOVE TEMP " + tempb4 + " PLUS TEMP " + t0.tempnum + " TEMP " + tempb3);
		int tempb5 = methodtable.tempb;
		methodtable.tempb++;
		AddString("HLOAD TEMP " + tempb5 + " TEMP " + tempb4 + " 4");
		AddString("JUMP L" + label2);
		_ret.tempnum = tempb5;
		//越界，报错退出
		AddString("L" + label1);
		AddString("ERROR");
		AddString("L" + label2 + " NOOP");
		return _ret;
	}

	/**
	 * f0 -> PrimaryExpression() 
	 * f1 -> "." 
	 * f2 -> "length"
	 */
	public VariType visit(ArrayLength n, Table argu) {
		VariType _ret = new VariType();
		_ret.type = "Integer";
		VariType t0 = n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		MethodTable methodtable = (MethodTable)argu;
		int tempb1 = methodtable.tempb;
		methodtable.tempb++;
		AddString("HLOAD TEMP " + tempb1 + " TEMP " + t0.tempnum + " 0");
		_ret.tempnum = tempb1;
		return _ret;
	}

	/**
	 * f0 -> PrimaryExpression() 
	 * f1 -> "." 
	 * f2 -> Identifier() 
	 * f3 -> "(" 
	 * f4 -> ( ExpressionList() )? 
	 * f5 -> ")"
	 */
	public VariType visit(MessageSend n, Table argu) { 
		VariType _ret = null;
		int label1 = labelnum;
		labelnum++;
		int label2 = labelnum;
		labelnum++;
		VariType t0 = n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		ClassTable classtable = ((MethodTable) argu).classtable.toptable.getclasstable(t0.name);
		MethodTable methodtable = classtable.getmethodtable(n.f2.f0.tokenImage);
		MethodParam methodparam = new MethodParam();
		methodparam.methodtable = (MethodTable) argu;
		if(methodtable.paramnum >= 20) {
			methodparam.ifparammorethan20 = true;
			int temptemp = ((MethodTable)argu).tempb;
			((MethodTable)argu).tempb++;
			AddString("MOVE TEMP " + temptemp + " HALLOCATE " + (4*(methodtable.paramnum-18)));
			methodparam.temptemp = temptemp;
		}
		n.f3.accept(this, argu);
		n.f4.accept(this, methodparam);
		n.f5.accept(this, argu);
//		TopTable toptable = ((MethodTable) argu).toptable;
		AddString("CJUMP LT 0 TEMP " + t0.tempnum + " L" + label1);
		int tempb1 = ((MethodTable)argu).tempb;
		((MethodTable)argu).tempb++;
		AddString("HLOAD TEMP " + tempb1 + " TEMP " + t0.tempnum + " 0");
		int tempb2 = ((MethodTable)argu).tempb;
		((MethodTable)argu).tempb++;
		AddString("HLOAD TEMP " + tempb2 + " TEMP " + tempb1 + " " + (classtable.GetMethodNum(methodtable.method_name)*4));
		int tempb3 = ((MethodTable)argu).tempb;
		((MethodTable)argu).tempb++;
		AddString("MOVE TEMP " + tempb3 + " CALL TEMP " + tempb2 + " ( TEMP " + t0.tempnum + methodparam.paramTempList + " ) ");
		AddString("JUMP L" + label2);
		AddString("L" + label1 + " ERROR");
		AddString("L" + label2 + " NOOP");
		_ret = new VariType(methodtable.returntype.name, methodtable.returntype.type, tempb3);
		return _ret;
	}

	/**
	 * f0 -> Expression() 
	 * f1 -> ( ExpressionRest() )*
	 */
	public VariType visit(ExpressionList n, Table argu) {
		VariType _ret = null;
		MethodParam methodparam = (MethodParam) argu;
		methodparam.paramnum++;
		VariType t0 = n.f0.accept(this, methodparam.methodtable);
		methodparam.insertparamtype(t0);
		if(methodparam.ifparammorethan20 && methodparam.paramnum >= 19) {
//			if(methodparam.paramnum == 19) {
//				methodparam.paramTempList += " TEMP " + methodparam.temptemp;
//			}
			AddString("HSTORE TEMP " + methodparam.temptemp + " " + (4*(methodparam.paramnum-19)) + " TEMP " + t0.tempnum);
		}
		else {
			methodparam.paramTempList += " TEMP " + t0.tempnum;			
		}
		n.f1.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "," 
	 * f1 -> Expression()
	 */
	public VariType visit(ExpressionRest n, Table argu) {
		VariType _ret = null;
		MethodParam methodparam = (MethodParam) argu;
		methodparam.paramnum++;
		n.f0.accept(this, argu);
		VariType t1 = n.f1.accept(this, methodparam.methodtable);
		methodparam.insertparamtype(t1);
		if(methodparam.ifparammorethan20 && methodparam.paramnum >= 19) {
			if(methodparam.paramnum == 19) {
				methodparam.paramTempList += " TEMP " + methodparam.temptemp;
			}
			AddString("HSTORE TEMP " + methodparam.temptemp + " " + (4*(methodparam.paramnum-19)) + " TEMP " + t1.tempnum);
		}
		else {
			methodparam.paramTempList += " TEMP " + t1.tempnum;
		}
		return _ret;
	}

	/**
	 * f0 -> IntegerLiteral() 
	 * 		 | TrueLiteral() 
	 * 		 | FalseLiteral() 
	 * 		 | Identifier() 
	 * 		 | ThisExpression() 
	 * 		 | ArrayAllocationExpression() 
	 * 		 | AllocationExpression() 
	 * 		 | NotExpression() 
	 * 		 | BracketExpression()
	 */
	public VariType visit(PrimaryExpression n, Table argu) {
		VariType _ret = null;
		_ret = n.f0.accept(this, argu);
		if (n.f0.choice instanceof Identifier) {
			NodeToken nodetoken = ((Identifier) (n.f0.choice)).f0;
			MethodTable methodtable = (MethodTable) argu;
	    	Vari vari = methodtable.getvari(nodetoken.tokenImage);
	    	if(vari != null)
	    		_ret = vari.vari_type;
	    	else {
	    		ClassTable classtable = methodtable.classtable;
	    		vari = classtable.getvari(nodetoken.tokenImage);
	    		if(vari != null)
	    			_ret = vari.vari_type;	    		
	    	}
			int varinum = methodtable.GetVariNumLocal(nodetoken.tokenImage);
			if(varinum >= 0) { //f0在函数中，且为本地变量
				_ret.tempnum = varinum;
				return _ret;
			}
			varinum = methodtable.GetVariNumParam(nodetoken.tokenImage);
			if(varinum >= 0) { //f0在函数中，且为参数
				if(methodtable.paramnum >= 20 && varinum >= 19) {
					int tempb1 = methodtable.tempb;
					methodtable.tempb++;
					AddString("HLOAD TEMP " + tempb1 + " TEMP 19 " + (4*(varinum-19)));
					_ret.tempnum = tempb1;
					return _ret;
				}
				else {
					_ret.tempnum = varinum;
					return _ret;					
				}
			}
			varinum = methodtable.classtable.GetVariNum(nodetoken.tokenImage);
			if(varinum >= 0) { //f0在类中
				int tempb1 = methodtable.tempb;
				methodtable.tempb++;
				AddString("HLOAD TEMP " + tempb1 + " TEMP 0 " + (4+4*varinum));
				_ret.tempnum = tempb1;
				return _ret;
			}
		}
		return _ret;
	}

	/**
	 * f0 -> <INTEGER_LITERAL>
	 */
	public VariType visit(IntegerLiteral n, Table argu) {
		VariType _ret = new VariType();
		n.f0.accept(this, argu);
		_ret.type = "Integer";
		_ret.ifintegerliteral = true;
		_ret.integerliteral = Integer.parseInt(n.f0.tokenImage);
		MethodTable methodtable = (MethodTable)argu;
		int tempb1 = methodtable.tempb;
		methodtable.tempb++;
		AddString("MOVE TEMP " + tempb1 + " " + n.f0.tokenImage);
		_ret.tempnum = tempb1;
		return _ret;
	}

	/**
	 * f0 -> "true"
	 */
	public VariType visit(TrueLiteral n, Table argu) {
		VariType _ret = new VariType();
		n.f0.accept(this, argu);
		MethodTable methodtable = (MethodTable)argu;
		int tempb1 = methodtable.tempb;
		methodtable.tempb++;
		AddString("MOVE TEMP " + tempb1 + " 1");
		_ret.tempnum = tempb1;
		_ret.type = "Boolean";
		return _ret;
	}

	/**
	 * f0 -> "false"
	 */
	public VariType visit(FalseLiteral n, Table argu) {
		VariType _ret = new VariType();
		n.f0.accept(this, argu);
		MethodTable methodtable = (MethodTable)argu;
		int tempb1 = methodtable.tempb;
		methodtable.tempb++;
		AddString("MOVE TEMP " + tempb1 + " 0");
		_ret.tempnum = tempb1;
		_ret.type = "Boolean";
		return _ret;
	}

	/**
	 * f0 -> <IDENTIFIER>
	 */
	public VariType visit(Identifier n, Table argu) {
		VariType _ret = null;
		n.f0.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "this"
	 */
	public VariType visit(ThisExpression n, Table argu) {
		VariType _ret = new VariType();
		MethodTable methodtable = (MethodTable) argu;
		n.f0.accept(this, argu);
		_ret.type = "Object";
		_ret.name = methodtable.methodinclass_name;
		_ret.tempnum = 0;
		return _ret;
	}

	/**
	 * f0 -> "new" 
	 * f1 -> "int" 
	 * f2 -> "[" 
	 * f3 -> Expression() 
	 * f4 -> "]"
	 */
	//为数组分配空间 函数或是类的结构中只存数组的首地址
	//真正的数组位置上，首先存数组的元素个数，再依次存放各个元素
	public VariType visit(ArrayAllocationExpression n, Table argu) {
		VariType _ret = new VariType();
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		VariType t3 = n.f3.accept(this, argu);
		n.f4.accept(this, argu);
		_ret.type = "Array";
		if (t3.ifintegerliteral == true) {
			_ret.ifintegerliteral = true;
			_ret.integerliteral = t3.integerliteral;
		}
		MethodTable methodtable = (MethodTable)argu;
		int tempb1 = methodtable.tempb;
		methodtable.tempb++;
		//tempb1中存数组元素个数*4
		AddString("MOVE TEMP " + tempb1 + " TIMES TEMP " + t3.tempnum + " 4");
		int tempb2 = methodtable.tempb;
		methodtable.tempb++;
		//tempb2中存数组真正的长度
		AddString("MOVE TEMP " + tempb2 + " PLUS TEMP " + tempb1 + " 4");
		int tempb3 = methodtable.tempb;
		methodtable.tempb++;
		//tempb3中存数组首地址
		AddString("MOVE TEMP " + tempb3 + " HALLOCATE TEMP " + tempb2);
		//在数组首地址的位置写入数组的元素个数
		AddString("HSTORE TEMP " + tempb3 + " 0 TEMP " + t3.tempnum);
		int tempb4 = methodtable.tempb;
		methodtable.tempb++;
		//tempb4中存循环赋值的终点
		AddString("MOVE TEMP " + tempb4 + " PLUS TEMP " + tempb3 + " TEMP " + tempb1);
		int label1 = labelnum;
		labelnum++;
		int label2 = labelnum;
		labelnum++;
		//循环对每一个数组元素初始化为0 //TODO 
		AddString("L" + label1);
		AddString("HSTORE TEMP " + tempb4 + " 0 0");
		AddString("MOVE TEMP " + tempb4 + " MINUS TEMP " + tempb4 + " 4");
		int tempb5 = methodtable.tempb;
		methodtable.tempb++;
		AddString("MOVE TEMP " + tempb5 + " LT TEMP " + tempb3 + " TEMP " + tempb4);
		AddString("CJUMP TEMP " + tempb5 + " L" + label2);
		AddString("JUMP L" + label1);
		AddString("L" + label2 + " NOOP");
		_ret.tempnum = tempb3;
		return _ret;
	}

	/**
	 * f0 -> "new" 
	 * f1 -> Identifier() 
	 * f2 -> "(" 
	 * f3 -> ")"
	 */
	//为类分配空间 申请两块内存空间，第一块放函数表，第二块开头四个位置放函数表的地址，后面放变量表
	//变量表的首地址作为类的首地址
	//类的变量表必须由上到下是祖先到自己，这样上转型赋值时计算变量位置才不会出错
	public VariType visit(AllocationExpression n, Table argu) {
		VariType _ret = new VariType();
		n.f0.accept(this, argu);
		VariType t1 = n.f1.accept(this, argu);
		MethodTable methodtable = (MethodTable)argu;
		ClassTable classtable = methodtable.toptable.getclasstable(n.f1.f0.tokenImage);
		int tempb1 = methodtable.tempb;
		methodtable.tempb++;
		//tempb1中存函数表首地址
		AddString("MOVE TEMP " + tempb1 + " HALLOCATE " + (classtable.total_member_method_num*4));
		int tempb2 = methodtable.tempb;
		methodtable.tempb++;
		//tempb2中存变量表首地址
		AddString("MOVE TEMP " + tempb2 + " HALLOCATE " + (classtable.total_member_variable_num*4 +4));
		//依次将各个函数写入函数表
		for(int i = 0; i < classtable.total_member_method.size(); i++) {
			String methodwithclassName = classtable.total_member_method.get(i);
			AddString("HSTORE TEMP " + tempb1 + " " + i*4 + " " + methodwithclassName);
		}
		//在变量表的第一个位置写入类的首地址
		AddString("HSTORE TEMP " + tempb2 + " 0 TEMP " + tempb1);
		for(int i = 0; i < classtable.total_member_variable_num; i++) {
			AddString("HSTORE TEMP " + tempb2 + " " + (i*4+4) + " 0");
		}
		n.f2.accept(this, argu);
		n.f3.accept(this, argu);
		_ret.type = "Object";
		_ret.name = n.f1.f0.tokenImage;
		_ret.tempnum = tempb2;
		return _ret;
	}

	/**
	 * f0 -> "!" 
	 * f1 -> Expression()
	 */
	public VariType visit(NotExpression n, Table argu) {
		VariType _ret = new VariType();
		n.f0.accept(this, argu);
		VariType t1 = n.f1.accept(this, argu);
		MethodTable methodtable = (MethodTable)argu;
		int tempb1 = methodtable.tempb;
		methodtable.tempb++;
		AddString("MOVE TEMP " + tempb1 + " MINUS 1 TEMP " + t1.tempnum);
		_ret.type = "Boolean";
		_ret.tempnum = tempb1;
		return _ret;
	}

	/**
	 * f0 -> "(" 
	 * f1 -> Expression() 
	 * f2 -> ")"
	 */
	public VariType visit(BracketExpression n, Table argu) {
		VariType _ret = null;
		n.f0.accept(this, argu);
		_ret = n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		return _ret;
	}
}
