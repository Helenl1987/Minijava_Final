package kanga.S2K;
//
// Generated by JTB 1.3.2
//

import kanga.syntaxtree.*;
import kanga.visitor.GJVoidDepthFirst;

import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class S2KVisitor extends GJVoidDepthFirst<SymbolCFG> {
	
	public Label labelnote = null;
	public Label jumpnote = null;
	public int callargs = 0;
	
	//
	// Auto class visitors--probably don't need to be overridden.
	//
	public void visit(NodeList n, SymbolCFG argu) {
		int _count = 0;
		for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
			e.nextElement().accept(this, argu);
			_count++;
		}
	}

	public void visit(NodeListOptional n, SymbolCFG argu) {
		if (n.present()) {
			int _count = 0;
			for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
				Node node = e.nextElement();
				if(node instanceof Temp) {
					BasicBlock bb = ((ControlFlowGraph)argu).bbset.lastElement();
					int nTemp = Integer.parseInt(((Temp)node).f1.f0.tokenImage);
					if(!bb.Def.get(nTemp)) {
						bb.Use.set(nTemp);
					}
					bb.bbs.lastElement().Use.set(nTemp);
					callargs++;
				}
				node.accept(this, argu);
				_count++;
			}
		}
	}

	public void visit(NodeOptional n, SymbolCFG argu) {
		if (n.present()) {
			n.node.accept(this, argu);
			if(n.node instanceof Label)
				labelnote = (Label)n.node;
		}
	}

	public void visit(NodeSequence n, SymbolCFG argu) {
		int _count = 0;
		for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
			e.nextElement().accept(this, argu);
			_count++;
		}
	}

	public void visit(NodeToken n, SymbolCFG argu) {
	}

	//
	// User-generated visitor methods below
	//

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
	public void visit(Goal n, SymbolCFG argu) {
		AllCFG allcfg = (AllCFG)argu;
		ControlFlowGraph cfg = new ControlFlowGraph();
		allcfg.cfgs.put("MAIN", cfg);
		allcfg.cfgsVec.add("MAIN");
		cfg.allcfg = allcfg;
		cfg.paramnum = 0;
		cfg.methodname = "MAIN";
		n.f0.accept(this, argu);
		n.f1.accept(this, cfg);
		n.f2.accept(this, argu);
		cfg.CreateCFG();
		n.f3.accept(this, argu);
		n.f4.accept(this, argu);
		cfg.allcfg.ReLabel();
	}

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
	public void visit(StmtList n, SymbolCFG argu) {
		if(n.f0.nodes.isEmpty()) {
			return;
		}
		BasicBlock bb = new BasicBlock();
		ControlFlowGraph cfg = (ControlFlowGraph)argu;
		cfg.bbset.add(bb);
		bb.cfg = cfg;
		n.f0.accept(this, argu);
	}

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
	public void visit(Procedure n, SymbolCFG argu) {
		AllCFG allcfg = (AllCFG)argu;
		ControlFlowGraph cfg = new ControlFlowGraph();
		allcfg.cfgs.put(n.f0.f0.tokenImage, cfg);
		allcfg.cfgsVec.add(n.f0.f0.tokenImage);
		cfg.allcfg = allcfg;
		cfg.paramnum = Integer.parseInt(n.f2.f0.tokenImage);
		cfg.methodname = n.f0.f0.tokenImage;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		n.f3.accept(this, argu);
		n.f4.accept(this, cfg);
		cfg.CreateCFG();
	}

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
	public void visit(Stmt n, SymbolCFG argu) {
		BasicBlock bb = ((ControlFlowGraph)argu).bbset.lastElement();
		if(labelnote != null) {
			BasicBlock newbb = new BasicBlock();
			bb.cfg.bbset.add(newbb);
			newbb.cfg = bb.cfg;
			bb = newbb;
			bb.startlabel = labelnote.f0.tokenImage;
			bb.cfg.startlabel2bb.put(bb.startlabel, bb);
			labelnote = null;
			if(jumpnote != null)
				jumpnote = null;
		}
		if(jumpnote != null) {
			BasicBlock newbb = new BasicBlock();
			bb.cfg.bbset.add(newbb);
			newbb.cfg = bb.cfg;
			bb = newbb;
			jumpnote = null;
		}
		BBStatement bbs = new BBStatement();
		bbs.node = n.f0.choice;
		bbs.basicblock = bb;
		bb.bbs.add(bbs);
		n.f0.accept(this, argu);
	}

   /**
    * f0 -> "NOOP"
    */
	public void visit(NoOpStmt n, SymbolCFG argu) {
		n.f0.accept(this, argu);
	}

   /**
    * f0 -> "ERROR"
    */
	public void visit(ErrorStmt n, SymbolCFG argu) {
		n.f0.accept(this, argu);
	}

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
	public void visit(CJumpStmt n, SymbolCFG argu) {
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		BasicBlock bb = ((ControlFlowGraph)argu).bbset.lastElement();
		bb.endlabel = n.f2.f0.tokenImage;
		jumpnote = n.f2;
		int nTemp = Integer.parseInt(n.f1.f1.f0.tokenImage);
		if(!bb.Def.get(nTemp)) {
			bb.Use.set(nTemp);
		}
		bb.bbs.lastElement().Use.set(nTemp);
	}

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
	public void visit(JumpStmt n, SymbolCFG argu) {
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		BasicBlock bb = ((ControlFlowGraph)argu).bbset.lastElement();
		bb.endlabel = n.f1.f0.tokenImage;
		jumpnote = n.f1;
	}

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
	public void visit(HStoreStmt n, SymbolCFG argu) {
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		n.f3.accept(this, argu);
		BasicBlock bb = ((ControlFlowGraph)argu).bbset.lastElement();
		int nTemp = Integer.parseInt(n.f1.f1.f0.tokenImage);
		if(!bb.Def.get(nTemp)) {
			bb.Use.set(nTemp);			
		}
		bb.bbs.lastElement().Use.set(nTemp);
		nTemp = Integer.parseInt(n.f3.f1.f0.tokenImage);
		if(!bb.Def.get(nTemp)) {
			bb.Use.set(nTemp);			
		}
		bb.bbs.lastElement().Use.set(nTemp);
	}

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
	public void visit(HLoadStmt n, SymbolCFG argu) {
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		n.f3.accept(this, argu);
		BasicBlock bb = ((ControlFlowGraph)argu).bbset.lastElement();
		
		int nTemp = Integer.parseInt(n.f2.f1.f0.tokenImage);
		if(!bb.Def.get(nTemp)) {
			bb.Use.set(nTemp);			
		}
		bb.bbs.lastElement().Use.set(nTemp);
		
		nTemp = Integer.parseInt(n.f1.f1.f0.tokenImage);
		if(!bb.Use.get(nTemp)) {
			bb.Def.set(nTemp);			
		}
		if(!bb.bbs.lastElement().Use.get(nTemp)) {
			bb.bbs.lastElement().Def.set(nTemp);			
		}
	}

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
	public void visit(MoveStmt n, SymbolCFG argu) {
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		BasicBlock bb = ((ControlFlowGraph)argu).bbset.lastElement();
		int nTemp = Integer.parseInt(n.f1.f1.f0.tokenImage);
		if(!bb.Use.get(nTemp)) {
			bb.Def.set(nTemp);			
		}
		if(!bb.bbs.lastElement().Use.get(nTemp)) {
			bb.bbs.lastElement().Def.set(nTemp);			
		}
	}

	
   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
	public void visit(PrintStmt n, SymbolCFG argu) {
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
	}

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
	public void visit(Exp n, SymbolCFG argu) {
		n.f0.accept(this, argu);
	}

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
	public void visit(StmtExp n, SymbolCFG argu) {
		ControlFlowGraph cfg = (ControlFlowGraph)argu;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		BasicBlock bb = cfg.bbset.lastElement();
		BBStatement bbs = new BBStatement();
		bbs.node = n;
		bbs.basicblock = bb;
		bb.bbs.add(bbs);
		n.f3.accept(this, argu);
		n.f4.accept(this, argu);
	}

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
	public void visit(Call n, SymbolCFG argu) {
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		callargs = 0;
		n.f3.accept(this, argu);
		BasicBlock bb = ((ControlFlowGraph)argu).bbset.lastElement();
		if(bb.cfg.maxproparam < callargs)
			bb.cfg.maxproparam = callargs;
		n.f4.accept(this, argu);
	}

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
	public void visit(HAllocate n, SymbolCFG argu) {
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
	}

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
	public void visit(BinOp n, SymbolCFG argu) {
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		BasicBlock bb = ((ControlFlowGraph)argu).bbset.lastElement();
		int nTemp = Integer.parseInt(n.f1.f1.f0.tokenImage);
		if(!bb.Def.get(nTemp)) {
			bb.Use.set(nTemp);			
		}
		bb.bbs.lastElement().Use.set(nTemp);
	}

   /**
    * f0 -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    */
	public void visit(Operator n, SymbolCFG argu) {
		n.f0.accept(this, argu);
	}

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
	public void visit(SimpleExp n, SymbolCFG argu) {
		n.f0.accept(this, argu);
		if(n.f0.choice instanceof Temp) {
			BasicBlock bb = ((ControlFlowGraph)argu).bbset.lastElement();
			int nTemp = Integer.parseInt(((Temp)n.f0.choice).f1.f0.tokenImage);
			if(!bb.Def.get(nTemp)) {
				bb.Use.set(nTemp);				
			}
			bb.bbs.lastElement().Use.set(nTemp);
		}
		
	}

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
	public void visit(Temp n, SymbolCFG argu) {
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
	}

   /**
    * f0 -> <INTEGER_LITERAL>
    */
	public void visit(IntegerLiteral n, SymbolCFG argu) {
		n.f0.accept(this, argu);
	}

   /**
    * f0 -> <IDENTIFIER>
    */
	public void visit(Label n, SymbolCFG argu) {
		n.f0.accept(this, argu);
	}

}
